import 'dart:developer';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:equatable/equatable.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../modal/modal.dart';

// ignore: must_be_immutable
class UserMatcheProvider extends Equatable with ChangeNotifier {
  UserMatcheProvider(this.matchone, this.chat);
  // ignore: prefer_final_fields
  List<User> matchone;
  List<UserMatch> matchedUser = [];
  List<Chat>? chat = [];

  List<UserMatch> get userMatched {
    // matchedUser = [
    //   UserMatch(
    //     id: 1.toString(),
    //     userId: 1.toString(),
    //     matchedUser: matchone[1],
    //     chat: chat
    //         ?.where((chat) => chat.userId == 1 && chat.matchedUserId == 2)
    //         .toList(),
    //   ),
    //   UserMatch(
    //     id: 2.toString(),
    //     userId: 1.toString(),
    //     matchedUser: matchone[2],
    //     chat: chat
    //         ?.where((chat) => chat.userId == 1 && chat.matchedUserId == 3)
    //         .toList(),
    //   ),
    //   UserMatch(
    //     id: 3.toString(),
    //     userId: 1.toString(),
    //     matchedUser: matchone[3],
    //     chat: chat
    //         ?.where((chat) => chat.userId == 1 && chat.matchedUserId == 4)
    //         .toList(),
    //   ),
    //   UserMatch(
    //     id: 4.toString(),
    //     userId: 1.toString(),
    //     matchedUser: matchone[4],
    //     chat: chat
    //         ?.where((chat) => chat.userId == 1 && chat.matchedUserId == 5)
    //         .toList(),
    //   ),
    //   UserMatch(
    //     id: 5.toString(),
    //     userId: 1.toString(),
    //     matchedUser: matchone[5],
    //     chat: chat
    //         ?.where((chat) => chat.userId == 1 && chat.matchedUserId == 6)
    //         .toList(),
    //   ),
    //   UserMatch(
    //     id: 6.toString(),
    //     userId: 1.toString(),
    //     matchedUser: matchone[6],
    //     chat: chat
    //         ?.where((chat) => chat.userId == 1 && chat.matchedUserId == 7)
    //         .toList(),
    //   ),
    //   UserMatch(
    //     id: 7.toString(),
    //     userId: 1.toString(),
    //     matchedUser: matchone[7],
    //     chat: chat
    //         ?.where((chat) => chat.userId == 1 && chat.matchedUserId == 8)
    //         .toList(),
    //   ),
    //   UserMatch(
    //     id: 8.toString(),
    //     userId: 1.toString(),
    //     matchedUser: matchone[8],
    //     chat: chat
    //         ?.where((chat) => chat.userId == 1 && chat.matchedUserId == 9)
    //         .toList(),
    //   ),
    // ];
    return matchedUser;
  }

  @override
  // TODO: implement props
  List<Object?> get props => [matchedUser];
  List<UserMatch> matchuser = [];

  Future<void> updateMatchinFirebase(
      String userid, String likeUserId, User user) async {
    await FirebaseFirestore.instance
        .collection('users')
        .doc(userid)
        .collection('matches')
        .add({
      'id': likeUserId, // this id should be generated by firebase
      'userId': userid,
      'matchedUser': {
        'id': user.id,
        'name': user.name,
        'age': user.age,
        'gender': user.gender,
        'imgeUrl': user.imageUrls,
        'interests': user.interests,
        'bio': user.bio,
        'jobTitle': user.jobTitle,
        'location': user.location,
        'liked': user.liked,
      }
    }).then((value) => print('match user added'));
  }

  void addingFromChat(UserMatch user) {
    matchedUser.insert(
        0,
        UserMatch(
            id: user.id,
            userId: user.userId,
            matchedUser: user.matchedUser,
            chat: user.chat));
    notifyListeners();
  }

//i will call this function in just before the match screen
  void fetchMatchData(DocumentSnapshot data, String userid) {
    matchedUser.insert(
        0,
        UserMatch(
          id: data['id'],
          userId: data['userId'],
          matchedUser: User(
              name: data['matchedUser']['name'],
              age: data['matchedUser']['age'],
              gender: data['matchedUser']['gender'],
              imageUrls: data['matchedUser']['imgeUrl'],
              interests: data['matchedUser']['interests'],
              bio: data['matchedUser']['bio'],
              jobTitle: data['matchedUser']['jobTitle'],
              location: data['matchedUser']['location']),
          chat: chat
              ?.where((chat) =>
                  chat.userId == userid ||
                  chat.matchedUserId == data['matchedUser']['id'])
              .toList(),
        ));

    log('value inserted');
  }
}
